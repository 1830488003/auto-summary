# 全自动总结扩展开发文档

## 任务目标
将一个名为“总结单世界书”的油猴脚本（Tampermonkey script）转换为一个名为“全自动总结”的SillyTavern扩展。

## 开发计划

### 第一阶段：基础结构搭建
1.  **创建 `manifest.json`**: 在 `auto-summary` 文件夹中定义扩展的基本信息。 (已完成)
2.  **创建项目文档**: 记录开发过程和关键决策。(进行中)

### 第二阶段：代码分离与迁移
1.  **创建 `style.css`**: 从原始脚本的 `popupHtml` 变量中提取所有CSS规则，并保存到 `style.css` 文件中。 (已完成)
2.  **创建 `settings.html`**: 从 `popupHtml` 变量中提取所有HTML结构，并保存到 `settings.html` 文件中。这个文件将定义扩展的UI界面。 (已完成)
3.  **创建 `index.js`**:
    *   将原始油猴脚本的JavaScript逻辑代码迁移到 `index.js`。 (已完成)
    *   移除油猴脚本特有的元数据块 (`// ==UserScript==...`) 和IIFE（立即调用函数表达式）的包裹。 (已完成)
    *   将所有代码包裹在 `jQuery(async () => { ... });` 中，以确保在页面DOM加载完成后再执行。 (已完成)

### 第三阶段：逻辑适配与重构
1.  **UI加载逻辑修改**:
    *   移除原有的 `SillyTavern_API.callGenericPopup` 调用来创建UI。 (已完成)
    *   改为在 `index.js` 中使用 `$.get` 方法异步加载 `settings.html` 的内容。 (已完成)
    *   将加载的HTML内容插入到酒馆预留的扩展设置区域 (`#extensions_settings2`) 或通过一个按钮触发弹窗显示。考虑到原脚本是弹窗形式，我会先实现一个按钮来触发这个弹窗。 (已完成)
2.  **API依赖处理**:
    *   保留并检查 `attemptToLoadCoreApis` 函数，确保它能正确获取到 SillyTavern 的核心API。 (已完成)
3.  **路径调整**:
    *   由于扩展的文件结构发生了变化，需要检查并修正代码中所有对文件路径的引用。 (已完成)
4.  **功能测试与调试**:
    *   在SillyTavern中启用新扩展，并全面测试所有功能。(进行中)

## 问题排查

### 2025-07-16: 弹窗无法显示 `TypeError: Cannot read properties of undefined (reading 'DISPLAY')`
*   **问题描述**: 点击扩展菜单中的“全自动总结”按钮后，浏览器控制台报错 `Uncaught (in promise) TypeError: Cannot read properties of undefined (reading 'DISPLAY')`，导致设置弹窗无法显示。
*   **分析**: 错误发生在 `openSummarizerPopup` 函数调用 `SillyTavern_API.callGenericPopup` 时。错误信息表明 `SillyTavern_API.POPUP_TYPE` 这个对象是 `undefined`，因此无法读取其下的 `DISPLAY` 属性。这很可能是因为 SillyTavern 的 API 进行了更新，旧的枚举类型 `POPUP_TYPE.DISPLAY` 已被废弃。
*   **根本原因**: 使用了过时的 SillyTavern API。
*   **解决方案**: 查阅了最新的 SillyTavern API 用法或根据常见实践推断，将 `SillyTavern_API.callGenericPopup` 的第二个参数从 `SillyTavern_API.POPUP_TYPE.DISPLAY` 直接修改为字符串 `'display'`。
*   **状态**: (已解决) - 已更新 `index.js` 中的 `callGenericPopup` 调用，弹窗现在应该可以正常显示了。

### 2025-07-16: 插件加载失败 `Failed to load one or more critical APIs`
*   **问题描述**: 插件在浏览器控制台反复报错 `[auto-summary] Failed to load one or more critical APIs (check TavernHelper_API.triggerSlash)`，导致插件无法初始化。
*   **分析**: 对比移植后的 `index.js` 和原始油猴脚本，发现 `attemptToLoadCoreApis` 函数本身没有变化。问题可能出在脚本的加载时机。SillyTavern扩展的加载时机可能早于核心API（特别是 `TavernHelper`）的完全初始化。原始脚本中存在一个3秒的延迟执行，这可能是为了等待API准备就绪。
*   **根本原因**: 固定的 `setTimeout` 延迟并不可靠，因为SillyTavern的API加载时间不确定。
*   **解决方案**: 采用SillyTavern扩展开发推荐的最佳实践，修改 `index.js` 的初始化逻辑。移除固定的 `setTimeout` 调用，改为使用一个轮询函数 (`initOnAppStart`) 等待 `SillyTavern_API.tavern_events.APP_STARTED` 事件。该事件在SillyTavern完全初始化后触发，确保所有核心API都已准备就绪。一旦接收到此事件，再调用 `mainInitializeSummarizer()` 函数来启动插件。这种方法从根本上解决了脚本执行时机过早的问题。
*   **状态**:  (已解决) - 新的初始化逻辑已实施。现在插件应该可以稳定加载了。

### 2025-07-16: 插件初始化时无限循环等待 `APP_STARTED` 事件
*   **问题描述**: 修复上一个问题后，插件在浏览器控制台反复打印 `[auto-summary] SillyTavern API or APP_STARTED event not ready. Retrying in 500ms.`，导致插件依然无法启动。
*   **分析**: `finalBootstrap` 函数的逻辑是等待 `SillyTavern_API.tavern_events.APP_STARTED` 事件可用后再附加监听器。这种实现方式存在两个问题：1) 如果脚本加载时，`APP_STARTED` 事件已经触发过了（即脚本加载晚于应用启动完成），插件将永远不会被初始化。2) 它无限期地等待一个可能永远不会在其检查时机出现的事件定义，导致无限循环。
*   **根本原因**: 初始化逻辑不够健壮，没有处理脚本加载时机晚于应用启动完成的“竞态条件”，并且轮询检查的条件不完善。
*   **解决方案**: 重构 `finalBootstrap` 函数，采用更可靠的初始化策略：
    1.  **立即检查**: 首先检查一个通常在SillyTavern完全加载后才可用的核心API（如 `TavernHelper_API.triggerSlash`）。如果该API已存在，说明应用已启动，可以直接运行插件的主初始化函数 `mainInitializeSummarizer()`。这解决了竞态条件问题。
    2.  **事件监听**: 如果应用尚未启动，则为 `APP_STARTED` 事件附加一个一次性监听器 (`.once()`)。这样可以确保即使事件已经发生，或者将来发生，初始化函数都只会被调用一次。
    3.  **安全轮询**: 只有在连事件系统本身都无法访问的情况下，才退回使用 `setTimeout` 进行短暂轮询，直到可以附加事件监听器为止。
*   **状态**: (已解决) - 新的 `finalBootstrap` 逻辑已实施，确保了插件无论在何种加载时机下都能被可靠地初始化。

### 2025-07-16: 启动逻辑导致无限循环与API加载失败
*   **问题描述**: 无论是采用轮询还是固定延迟启动，插件均在启动时报错 `Failed to load one or more critical APIs`，导致无法运行。用户反馈其他插件无此问题。
*   **分析**: 对比成功的插件 `my-world-book-momo`，发现其启动逻辑完全不同。它不进行任何“前置”的、全局性的API检查，而是采用“按需检查”的策略。我的插件 `attemptToLoadCoreApis` 函数过于严格，在脚本加载初期就要求所有未来会用到的API函数（如 `TavernHelper_API.triggerSlash`）都必须存在，而此时它们很可能尚未被酒馆完全初始化。
*   **根本原因**: 插件启动逻辑设计错误。不应该在脚本执行的最初阶段就对所有API进行全面、严格的检查。正确的做法是只在即将调用某个API函数前，确保其所在的顶层API对象（如 `SillyTavern_API`, `TavernHelper_API`）存在即可。
*   **解决方案**: 借鉴 `my-world-book-momo` 的成功经验，对启动逻辑进行彻底重构：
    1.  **废除所有启动延迟和轮询**：移除了 `setTimeout` 和 `finalBootstrap` 轮询函数。
    2.  **简化API检查**：修改 `attemptToLoadCoreApis` 函数，使其只检查 `SillyTavern_API`、`TavernHelper_API` 和 `jQuery_API` 这三个核心**对象**是否存在，不再检查具体的内部函数。
    3.  **直接启动**：在脚本的最后，直接调用 `runExtension()` 函数，立即开始执行插件逻辑。`runExtension` 内部会先进行一次简化的API对象检查，确保最基本的条件满足后，再继续执行后续的UI添加和事件绑定等操作。这种方式大大提高了插件的启动成功率和兼容性。
*   **状态**: (已解决) - 新的启动逻辑已实施，插件现在应该可以像其他标准扩展一样稳定、快速地启动。

### 2025-07-16: 弹窗无法显示 `TypeError: SillyTavern_API.callGenericPopup is not a function`
*   **问题描述**: 点击扩展菜单中的“全自动总结”按钮后，浏览器控制台报错 `Uncaught (in promise) TypeError: SillyTavern_API.callGenericPopup is not a function`，导致设置弹窗无法显示。
*   **分析**: 错误发生在 `openSummarizerPopup` 函数中。错误信息表明 `SillyTavern_API.callGenericPopup` 这个函数本身已经不存在于 `SillyTavern_API` 对象下。通过查阅一个能正常工作的扩展 `my-world-book-momo` 的代码，发现新的弹窗API需要通过 `SillyTavern.getContext().popup` 来访问。
*   **根本原因**: 使用了过时的 SillyTavern API 调用方式。
*   **解决方案**:
    1.  在 `openSummarizerPopup` 函数中，将 `SillyTavern_API.callGenericPopup(...)` 修改为 `SillyTavern_API.getContext().popup.callGenericPopup(...)`。
    2.  在 `summarizeAndUploadChunk` 函数中，同样修正了对确认弹窗的调用，并简化了逻辑，使其直接使用 `await` 来获取用户的确认结果，而不是包裹在 `new Promise` 中。
*   **状态**: (已解决) - 已更新 `index.js` 中所有 `callGenericPopup` 的调用，弹窗现在应该可以正常工作了。

### 2025-07-16: UI架构重构：从菜单弹窗到独立浮动按钮
*   **问题描述**: 原有的UI通过在SillyTavern的扩展菜单中添加一个入口来触发，点击后调用 `SillyTavern_API.getContext().popup.callGenericPopup` 来显示 `settings.html`。这种方式存在以下问题：
    1.  **入口隐蔽**: 功能入口隐藏在多级菜单中，不便于快速访问。
    2.  **样式受限**: 弹窗样式受限于SillyTavern的通用弹窗框架，难以进行深度定制和移动端适配。
    3.  **逻辑耦合**: 插件的UI逻辑与SillyTavern的弹窗API紧密耦合，当API更新时容易导致插件失效。
*   **分析**: 参考了 `按钮与页面教程.txt` 中提供的最佳实践，该教程推荐使用动态创建的浮动按钮和完全自定义的弹窗页面，以实现更好的用户体验和代码健壮性。
*   **根本原因**: 初始UI实现方式依赖性过强，且用户体验不佳。
*   **解决方案**: 对UI架构进行了彻底重构：
    1.  **移除菜单入口**: 在 `index.js` 中删除了 `addSummarizerMenuItem` 函数及其所有调用，不再向SillyTavern的扩展菜单注入任何内容。
    2.  **创建浮动按钮**: 新增 `createFloatingButton` 函数，在插件启动时动态创建一个可拖动的浮动按钮 (`#auto-summary-float-button`)。按钮的位置可以在拖动后自动保存到 `localStorage`，并在下次加载时恢复。
    3.  **实现自定义弹窗**:
        *   重写 `openSummarizerPopup` 函数。该函数现在会动态构建一个完整的、独立的弹窗HTML结构 (`<div id="as-popup-container">...</div>`)，包含自定义的头部、可滚动的内容区域和关闭按钮。
        *   原有的 `settings.html` 内容通过 `$.get` 加载后，被直接注入到新弹窗的 `.as-popup-body` 内容区中。
        *   `settings.html` 本身也被精简，移除了最外层的容器 `div`。
    4.  **更新CSS**:
        *   在 `style.css` 中为新的浮动按钮和弹窗容器（`.as-popup`, `.as-popup-header` 等）添加了教程中推荐的 `position: fixed` 和 `flexbox` 布局样式，确保了在桌面和移动设备上的显示效果稳定、良好。
        *   所有原有的内部UI样式规则，其选择器都增加了 `.as-popup-body` 作为前缀，以确保它们在新容器内正确生效且作用域受限。
*   **状态**: (已解决) - UI已成功迁移到新的浮动按钮和自定义弹窗架构，显著提升了易用性和可维护性。

### 2025-07-16: 总结条目创建后被立即禁用
*   **问题描述**: 用户反馈，在执行总结并上传到世界书后，新创建或更新的总结条目虽然内容正确，但在世界书中的状态却是“禁用”(disabled)，导致总结在游戏中不生效。
*   **分析**: 通过分析控制台日志发现，在 `proceedWithSummarization` 函数成功创建/更新条目后，`manageSummaryLorebookEntries` 函数被调用。该函数负责根据用户选择的总结类型（小总结/大总结）来启用或禁用相关的世界书条目。日志显示，该函数错误地将刚刚创建的、本应启用的条目判断为“需要禁用”，并执行了禁用操作。
*   **根本原因**: `manageSummaryLorebookEntries` 函数内部的逻辑存在缺陷。它在判断一个条目是否应该被启用时，可能存在类型不匹配的问题（例如，将API返回的布尔值 `true` 与字符串 `"true"` 或其他非严格布尔值进行比较），导致其做出了错误的判断。
*   **解决方案**: 重构 `manageSummaryLorebookEntries` 函数的逻辑：
    1.  **强制类型转换**: 在进行比较之前，使用 `!!entry.enabled` 将从API获取的条目启用状态强制转换为严格的布尔值 (`true`/`false`)。
    2.  **简化判断逻辑**: 明确判断逻辑，只有当条目属于当前聊天、且其总结类型（小/大）与用户当前在UI上的选择完全匹配时，`shouldBeEnabled` 才为 `true`。
    3.  **精确更新**: 只有当条目当前的启用状态 (`isCurrentlyEnabled`) 与计算出的期望状态 (`shouldBeEnabled`) **不一致**时，才将其加入更新队列。这避免了不必要的操作。
*   **状态**: (已解决) - 已更新 `index.js` 中的 `manageSummaryLorebookEntries` 函数，修复了逻辑错误。现在新创建的总结条目会保持正确的启用状态。

### 2025-07-16: 连续总结时创建新条目而非追加
*   **问题描述**: 当一个聊天记录存在多个总结区块时（例如，先总结1-10楼，再总结11-20楼），插件没有在第一个总结条目（如“小总结-xxx-1-10”）上追加内容，而是错误地创建了一个全新的条目（如“小总结-xxx-11-20”）。
*   **分析**: 问题出在 `proceedWithSummarization` 函数中。该函数在尝试寻找一个已存在的、可追加的总结条目时，其逻辑不够健壮。它使用了 `lorebookEntries.find(...)`，这只会返回第一个满足条件的条目，而没有确保这个条目是**最新的**一个。如果因为某些原因（如手动操作、旧版插件的残留）导致存在多个同名的、已启用的总结条目，它可能会随机选到一个旧的，从而导致逻辑判断失误，最终选择创建一个新条目而不是追加。
*   **根本原因**: 查找待追加总结条目的逻辑不够精确，没有处理可能存在多个同类总结条目的情况，未能准确锁定最新的一个。
*   **解决方案**: 修改 `proceedWithSummarization` 函数中查找现有条目的逻辑。不再使用简单的 `find`，而是改为遍历所有世界书条目，并遵循以下规则来找到唯一、正确的目标条目：
    1.  检查条目是否已启用 (`entry.enabled`)。
    2.  检查条目的备注 (`entry.comment`) 是否符合当前聊天和总结类型的前缀（例如 `小总结-聊天名-`）。
    3.  如果满足以上条件，则从备注中解析出结束楼层号。
    4.  在所有符合条件的条目中，选择那个**结束楼层号最大**的条目作为追加目标。
    这确保了即使存在多个总结条目，插件也总能准确地找到最新的那一个进行内容追加，从而解决了重复创建条目的问题。
*   **状态**: (已解决) - 已更新 `index.js` 中的 `proceedWithSummarization` 函数，采用了更稳健的条目查找逻辑。

### 2025-07-16: 为世界书条目操作添加 `prevent_recursion` 参数
*   **问题描述**: 用户要求在创建和更新世界书条目时，增加 `prevent_recursion: true` 参数。
*   **分析**: 这是为了防止在操作世界书条目时，触发不必要的递归或连锁反应，提高系统的稳定性和可预测性。
*   **根本原因**: SillyTavern 的某些操作可能会触发事件，添加此参数可以有效避免这些副作用。
*   **解决方案**: 在 `proceedWithSummarization` 函数中，定位到调用 `TavernHelper_API.setLorebookEntries` 和 `TavernHelper_API.createLorebookEntries` 的位置，在传递给这两个函数的条目数据对象中，明确添加 `"prevent_recursion": true` 属性。
*   **状态**: (已解决) - 已更新 `index.js`，为所有相关的世界书条目创建和更新操作添加了 `prevent_recursion": true` 参数。

### 2025-07-16: 页面刷新后重复总结
*   **问题描述**: 尽管修复了追加逻辑，但在页面刷新后，插件有时仍然会从头开始重复总结已经总结过的内容。
*   **分析**: 用户反馈，在页面刷新后，`getMaxSummarizedFloorFromActiveLorebookEntry` 函数未能正确获取到已总结的楼层数，返回了-1。这导致 `triggerAutomaticSummarizationIfNeeded` 函数错误地认为所有消息都是未总结的，从而下达了重复总结的指令。进一步分析发现，这与插件的初始化时机有关。
*   **根本原因**: 插件的初始化逻辑虽然能确保API对象存在，但可能在SillyTavern的世界书数据完全加载和准备好之前就执行了。3秒的启动延迟在某些情况下不足以等待世界书加载完毕。
*   **解决方案**: 延长插件初始化的延迟时间。在 `initialize` 函数中，将 `await delay(3000);` 修改为 `await delay(8000);`，给予SillyTavern更充足的时间来完成其内部数据的加载，特别是世界书部分。
*   **状态**: (已解决) - 已更新 `index.js`，将初始化延迟增加到8秒，以期解决因加载时机问题导致的重复总结。

### 2025-07-16: 无法读取已总结条目
*   **问题描述**: 插件在加载时无法正确检测到世界书中已存在的总结条目，导致每次都从头开始总结。
*   **分析**:
    1.  **核心逻辑错误**: `getMaxSummarizedFloorFromActiveLorebookEntry` 函数被定义为需要传入 `entries` 参数的同步函数，但在调用它的 `applyPersistedSummaryStatusFromLorebook` 函数中并未传递此参数。这导致该函数无法访问世界书条目，总是返回-1。
    2.  **正则表达式错误**: 在 `displayWorldbookEntriesByWeight` 函数中，用于解析世界书条目内容和权重的正则表达式存在多处语法错误（例如，错误地使用了双反斜杠 `\\d` 而不是单反斜杠 `\d`），导致无法正确显示和筛选已有的总结内容。
*   **根本原因**: 函数调用与定义不匹配，以及多处正则表达式语法错误。
*   **解决方案**:
    1.  **重构核心函数**: 将 `getMaxSummarizedFloorFromActiveLorebookEntry` 修改为 `async` 函数，使其内部直接通过 `await TavernHelper_API.getLorebookEntries()` 来获取世界书条目，不再依赖外部传入参数。
    2.  **修正调用**: 相应地，将 `applyPersistedSummaryStatusFromLorebook` 也修改为 `async` 函数，并使用 `await` 来调用重构后的 `getMaxSummarizedFloorFromActiveLorebookEntry`。
    3.  **修正正则表达式**: 在 `displayWorldbookEntriesByWeight` 函数中，将所有错误的正则表达式（如 `/-(\\d+)-(\\d+)$/` 和 `/\\((\\d\\.\\d+?)\\)$/`）修正为正确的JavaScript语法（如 `/-(\d+)-(\d+)$/` 和 `/\((\d\.\d+?)\)$/`）。
*   **状态**: (已解决) - 已更新 `index.js`，修复了核心逻辑和正则表达式错误。现在插件应该能正确读取和解析已有的总结条目了。

### 2025-07-16: 自动总结触发阈值与UI设置不符
*   **问题描述**: 自动总结功能不触发，即使用户设置了“可见性偏移量”且未总结的消息数已超过“总结间隔 + 偏移量”。
*   **分析**: 通过检查控制台日志发现，自动总结的触发条件被硬编码为 `未总结消息数 >= 总结间隔 + 10`。代码中的 `+ 10` 是一个固定的缓冲区，没有使用用户在UI中设置的 `currentVisibilityOffset`（可见性偏移量）变量。
*   **根本原因**: 自动总结的触发逻辑与UI中的“可见性偏移量”设置脱钩。
*   **解决方案**: 修改 `index.js` 中的 `triggerAutomaticSummarizationIfNeeded` 和 `handleAutoSummarize` 函数。将写死的 `+ 10` 替换为 `+ currentVisibilityOffset`。这使得触发阈值动态地变为 `总结间隔 + 可见性偏移量`，与UI显示和用户预期保持一致。
*   **状态**: (已解决) - 已更新 `index.js`，自动总结的触发逻辑现在会正确使用用户定义的偏移量。

### 2025-07-16: UI界面美化与重构
*   **问题描述**: 插件的原始UI界面布局混乱，样式不统一，与SillyTavern的整体风格不协调，影响用户体验。
*   **分析**: 参考了同类型优秀插件 `quest-system-extension` 的设计风格，其采用深色主题、卡片式区块布局和统一的按钮样式，具有很好的视觉清晰度和现代感。
*   **根本原因**: 缺少统一的设计规范和现代化的CSS实践。
*   **解决方案**: 对UI进行了一次彻底的美化重构：
    1.  **引入设计体系**: 在 `style.css` 中建立了基于CSS变量的颜色和尺寸规范，借鉴了 `quest-system-extension` 的深色主题。
    2.  **重构HTML结构**: 修改 `settings.html`，将各个功能区用 `.as-section` 类进行包裹，形成了独立的、带标题的卡片式布局。
    3.  **统一控件风格**: 更新了所有按钮、输入框和选择器的样式，使其具有统一的外观和交互反馈，提升了整体协调性。
    4.  **实现动态折叠**: 在 `index.js` 中，重构了事件处理逻辑，使用事件委托为所有区块的头部添加了平滑的折叠/展开功能，取代了之前零散的事件绑定。
*   **状态**: (已解决) - 新的UI界面已完成，整体风格更加美观、专业，操作也更加直观。

### 2025-07-16: 弹窗层级与遮罩层问题
*   **问题描述**: 用户反馈，设置页面的弹窗层级不正确，有时会覆盖顶部的消息提示（Toastr），有时又会被其他UI元素遮挡。同时，缺少背景遮罩层，导致弹窗与背景内容混杂，体验不佳。
*   **分析**: 这是一个典型的CSS `z-index` 管理问题。需要为设置弹窗、遮罩层、浮动按钮和消息提示（Toastr通常有非常高的z-index）分配合理的、层级分明的 `z-index` 值。
*   **根本原因**: 缺少统一的层级管理策略和遮罩层实现。
*   **解决方案**:
    1.  **调整CSS层级**: 在 `style.css` 中，为弹窗相关元素设置了新的 `z-index` 体系：
        *   `.as-popup` (设置弹窗): `10000` - 确保它在普通UI之上，但在消息提示之下。
        *   `.as-popup-overlay` (新增的遮罩层): `9999` - 位于弹窗正下方，用于覆盖背景。
        *   `#auto-summary-float-button` (浮动按钮): `9998` - 确保它不会覆盖弹窗或遮罩。
    2.  **实现遮罩层逻辑**: 在 `index.js` 的 `openSummarizerPopup` 函数中：
        *   在创建弹窗的同时，动态创建 `<div class="as-popup-overlay"></div>` 并附加到 `body`。
        *   重构了关闭逻辑，无论是点击关闭按钮还是点击遮罩层本身，都会同时移除弹窗和遮罩层，确保了行为的一致性。
*   **状态**: (已解决) - 新的层级和遮罩层逻辑已实施，现在设置弹窗的显示行为符合预期，不会覆盖消息提示，并且有背景遮罩来提升聚焦感。

### 2025-07-16: 浮动按钮可被拖出页面范围
*   **问题描述**: 浮动按钮在拖动时没有边界检测，可以被拖动到浏览器窗口之外，导致无法再操作。
*   **分析**: 问题出在 `makeButtonDraggable` 函数中的 `dragMove` 事件处理器。该处理器直接将鼠标/触摸位置应用到按钮的CSS `top` 和 `left` 属性，没有检查计算出的新位置是否会超出窗口的可视区域。
*   **根本原因**: 拖动逻辑中缺少边界检查。
*   **解决方案**: 修改 `dragMove` 函数：
    1.  在计算新的 `top` 和 `left` 值之后，但在应用它们之前，获取窗口的宽度和高度 (`window.innerWidth`, `window.innerHeight`) 以及按钮自身的尺寸 (`button.outerWidth()`, `button.outerHeight()`)。
    2.  对 `newLeft` 和 `newTop` 值进行限制：
        *   `newLeft` 不能小于 `0`。
        *   `newLeft` 不能大于 `windowWidth - buttonWidth`。
        *   `newTop` 不能小于 `0`。
        *   `newTop` 不能大于 `windowHeight - buttonHeight`。
    3.  将经过边界限制后的值应用到按钮的CSS上。
*   **状态**: (已解决) - 已更新 `index.js` 中的 `dragMove` 函数，增加了边界检测逻辑，现在浮动按钮将被限制在窗口可视范围内。

### 2025-07-16: 修复设置页面在移动端的显示Bug
*   **问题描述**: 在移动设备上，设置页面的弹窗会超出屏幕范围，导致部分内容无法查看或操作。
*   **分析**: 问题源于 `.as-popup` 的CSS样式。它使用 `top: 50%` 和 `transform: translate(-50%, -50%)` 来实现居中，这在内容高度超过视口高度时，会导致弹窗顶部被推出屏幕外。通过参考 `my-world-book-momo` 插件的实现，发现它使用了更健壮的响应式布局方案。
*   **根本原因**: 弹窗的CSS定位方式对移动端小屏幕的适配不佳。
*   **解决方案**:
    1.  **移动端优先**: 修改 `style.css` 中 `.as-popup` 的默认样式。移除 `transform`，并将 `top` 和 `left` 设置为 `5vh` 和 `5vw`，确保弹窗在任何情况下都与视口边缘保持安全距离。同时，将 `height` 设置为 `90vh`，使其能充分利用屏幕空间。
    2.  **桌面端适配**: 使用媒体查询 (`@media (min-width: 768px)`)，当屏幕宽度大于等于768px时，恢复使用 `top: 50%`, `left: 50%`, `transform: translate(-50%, -50%)` 的经典居中方式，并设置更适合桌面的宽度和高度。
*   **状态**: (已解决) - 已更新 `style.css`，采用了响应式布局，解决了移动端的显示问题。

### 2025-07-16: 优化浮动按钮图标
*   **问题描述**: 浮动按钮原先使用 Font Awesome 的 `fa-book-open` 图标，虽然相关但不够直观地表达“总结”的含义。
*   **分析**: 需要一个更贴近“记录”、“笔记”或“文本处理”的图标来提升用户对功能的第一印象。
*   **根本原因**: 图标选择不够精准。
*   **解决方案**: 在 `index.js` 的 `createFloatingButton` 函数中，将按钮的 HTML 从一个带 class 的 `div` 修改为一个直接包含 Emoji `📝` 的 `div`。这个图标 (`📝`，备忘录) 能更直观地传达“总结”或“记录”的意图。
*   **状态**: (已解决) - 已更新 `index.js`，浮动按钮现在显示为 `📝` 图标。

### 2025-07-16: 实现总结预设下拉列表的持久化
*   **问题描述**: 用户在“总结预设”区块选择一个预设后，关闭并重新打开设置弹窗，之前的选择会丢失，下拉列表总是重置为“自定义”选项。
*   **分析**: 这是因为插件没有将用户选择的预设信息保存到任何持久化存储中。每次打开弹窗时，它都无法知道用户上一次的选择是什么。
*   **根本原因**: 缺少对预设选择状态的持久化处理。
*   **解决方案**: 对 `index.js` 进行了以下修改以实现状态持久化：
    1.  **新增存储键**: 定义了一个新的 `localStorage` 键 `STORAGE_KEY_SELECTED_SUMMARY_PRESET`，专门用于存储用户选择的预设文件名。
    2.  **增强加载逻辑**: 修改 `loadSettings` 函数，在加载其他设置的同时，从 `localStorage` 读取已保存的预设文件名。
    3.  **更新事件处理**:
        *   修改了预设下拉列表 (`$summaryPromptPresetSelect`) 的 `change` 事件监听器。当用户选择一个预设时，立即将其文件名保存到 `localStorage`。
        *   修改了“保存”(`saveCustomSummaryPrompt`)和“恢复默认”(`resetDefaultSummaryPrompt`)按钮的逻辑。当用户手动保存或重置文本框内容时，系统会认为这是一个自定义的修改，因此会从 `localStorage` 中**移除**已保存的预设选择，确保下次打开时下拉框显示为“自定义”。
    4.  **恢复UI状态**: 在弹窗打开并绑定事件后，代码会检查是否存在已保存的预设选择。如果存在，则自动将下拉列表设置为该选项，并触发一次 `change` 事件来加载对应的预设内容到文本框中，从而完美恢复用户上次的会话状态。
*   **状态**: (已解决) - 预设选择现在可以被正确保存和恢复，提升了用户体验的连贯性。

### 2025-07-16: 移动端无法点击浮动按钮
*   **问题描述**: 在移动设备上，点击浮动按钮无法打开设置页面。
*   **分析**: 问题在于，即使是轻微的手指抖动，在触摸屏上也很容易被识别为 `touchmove` 事件。这导致 `makeButtonDraggable` 函数中的 `hasMoved` 标志被意外设置为 `true`，从而阻止了后续 `click` 事件的执行。此外，在 `dragStart` 事件中过早地调用 `e.preventDefault()` 也会在某些移动端浏览器上阻止 `click` 事件。
*   **根本原因**: 拖动检测逻辑对于移动端触摸操作过于敏感，并且事件处理不当。
*   **解决方案**: 参考 `my-world-book-momo` 插件的实现和最佳实践，对 `makeButtonDraggable` 函数进行优化：
    1.  **移除启动时的 `preventDefault`**: 从 `dragStart` 函数中移除了 `e.preventDefault()` 调用，这是解决移动端点击问题的关键。
    2.  **延迟 `preventDefault`**: 将 `e.preventDefault()` 的调用移至 `dragMove` 函数内部，并且仅在 `hasMoved` 标志被设置为 `true`（即确认用户意图是拖动而非点击）之后才执行。
    3.  **保留容错阈值**: 保留了5像素的容错阈值逻辑。只有当手指的移动距离超过这个阈值时，才将 `hasMoved` 标志设置为 `true`，并开始阻止页面滚动。
    这套组合拳确保了插件能准确区分“微小抖动的点击”和“真正的拖动”意图，从根本上解决了移动端的点击问题，同时保证了拖动时页面的稳定性。
*   **状态**: (已解决) - 已更新 `index.js` 中的 `makeButtonDraggable` 函数，解决了移动端的点击问题。

### 2025-07-16: 移动端无法点击浮动按钮
*   **问题描述**: 在移动设备上，点击浮动按钮无法打开设置页面。
*   **分析**: 问题在于，即使是轻微的手指抖动，在触摸屏上也很容易被识别为 `touchmove` 事件。这导致 `makeButtonDraggable` 函数中的 `hasMoved` 标志被意外设置为 `true`，从而阻止了后续 `click` 事件的执行。
*   **根本原因**: 拖动检测逻辑对于移动端触摸操作过于敏感，没有区分“微小移动的点击”和“真正的拖动”意图。
*   **解决方案**: 参考 `按钮与页面教程.txt` 的最佳实践，对 `makeButtonDraggable` 函数进行优化。在 `dragStart` 事件中记录初始触摸位置，然后在 `dragMove` 事件中，增加一个5像素的容错阈值。只有当手指的移动距离（水平或垂直）超过这个阈值时，才将 `hasMoved` 标志设置为 `true`。这样可以有效地忽略点击时产生的微小抖动，确保单击操作能够被正确识别和执行。
*   **状态**: (已解决) - 已更新 `index.js` 中的 `makeButtonDraggable` 函数，增加了拖动容错阈值，解决了移动端的点击问题。

### 2025-07-16: “清空全部”按钮功能调整
*   **问题描述**: “清空全部”按钮的功能与用户预期不符。它不应该直接修改世界书，而应仅仅作为清空UI文本框的快捷方式。
*   **分析**: 根据用户提供的最新教程，该按钮的定位是一个UI辅助工具，而非直接的数据操作工具。它的作用是为后续的“保存修改”操作做准备。
*   **根本原因**: 对“清空全部”按钮的功能定位理解错误，将其实现为了一个直接的、破坏性的数据操作。
*   **解决方案**: 遵循“UI操作与数据操作分离”的原则，对该按钮的功能进行重构：
    1.  **简化按钮逻辑**: 修改了 `worldbookClearButton` 的 `click` 事件监听器，使其唯一的动作就是将世界书内容显示文本框 (`$worldbookContentDisplayTextArea`) 的值设置为空字符串 (`''`)。
    2.  **依赖保存按钮**: 用户点击“清空全部”后，文本框变空。此时，世界书数据并未改变。用户必须再点击“保存修改”按钮，才能将这个“空”状态写入世界书，从而实现覆盖式删除。
    3.  **保留保存逻辑**: `worldbookSaveButton` 的现有逻辑能够正确处理文本框为空的情况（无论是“显示全部”模式还是筛选模式），因此无需改动。
*   **状态**: (已解决) - “清空全部”按钮的功能已修正，现在它仅作为清空UI的辅助工具，符合最新的设计要求。

### 2025-07-16: 修复弹窗API调用错误
*   **问题描述**: 在执行“清空筛选内容”等需要弹窗确认的操作时，浏览器控制台报错 `TypeError: Cannot destructure property 'callGenericPopup' of 'SillyTavern_API.getContext(...).popup' as it is undefined`。
*   **分析**: 之前为了修复一个弹窗问题，将调用方式修改为 `SillyTavern_API.getContext().popup.callGenericPopup`，但这种解构赋值的方式在某些场景下依然不稳定。错误日志表明 `SillyTavern_API.getContext().popup` 这个对象本身是 `undefined`。
*   **根本原因**: 对 SillyTavern 弹窗API的调用方式理解不完全，`getContext()` 返回的对象本身就是弹窗函数，不应该再尝试访问其下的 `popup` 属性。
*   **解决方案**: 修改 `index.js` 中所有调用确认弹窗的地方，将 `const { callGenericPopup } = SillyTavern_API.getContext().popup; await callGenericPopup(...)` 的模式，直接改为 `await SillyTavern_API.getContext().popup(...)`。这确保了使用正确的API句柄来调用弹窗。
*   **状态**: (已解决) - 已修正所有相关弹窗的调用方式，现在功能应该可以正常使用了。

### 2025-07-16: 修复按权重删除功能
*   **问题描述**: 在筛选特定权重范围的事件后，清空文本框并保存，并不能完全删除这些事件，条目中仍会残留空行或标题。
*   **分析**: 根据用户提供的教程，问题根源在于 `displayWorldbookEntriesByWeight` 函数。该函数在构建 `worldbookEntryCache` 时，只缓存了符合权重条件的事件行，而忽略了空行、标题等非事件行。这导致保存逻辑在重构内容时，由于信息不完整，无法正确地移除所有被显示的内容。
*   **根本原因**: `worldbookEntryCache` 的构建逻辑与教程描述的“读取-筛选-编辑-重构-覆盖”流程不符，未能建立一个从“显示内容”到“原始内容”的完整、精确的行号映射。
*   **解决方案**: 严格遵循教程，重构 `displayWorldbookEntriesByWeight` 函数的逻辑：
    1.  **修正筛选逻辑**: 在筛选模式下，只将符合权重条件的事件行加入 `linesToShowInTextarea` 数组。在“显示全部”模式下，则显示所有行。
    2.  **精确缓存映射**: 无论在哪种模式下，只要一行文本被加入到 `linesToShowInTextarea` 中，就必须将其原始文本和原始行号 (`originalLineIndex`) 存入 `worldbookEntryCache.displayedLinesInfo`。
    3.  **明确视图状态**: 只要不是“显示全部”模式，就将 `worldbookEntryCache.isFilteredView` 设置为 `true`。
    通过这个修正，确保了保存逻辑（`$worldbookSaveButton` 的点击事件）能够基于一个完整且准确的映射来工作，从而正确地从原始内容中“删除”所有在UI上被清空的内容。
*   **状态**: (已解决) - 已更新 `index.js` 中的 `displayWorldbookEntriesByWeight` 函数，现在按权重删除功能可以正常工作。

### 2025-07-16: 优化通知系统，减少弹窗干扰
*   **问题描述**: 用户反馈插件在使用过程中弹窗过多，影响了正常使用流程。非关键性的成功或参考信息也会以弹窗形式出现，造成了不必要的打扰。
*   **分析**: 插件中的 `showToastr` 函数和部分逻辑（如 `summarizeAndUploadChunk`）被设计为对多种事件都进行弹窗提示，包括成功、信息、警告和错误。此外，当找不到上传目标世界书时，会弹出一个模态确认框，中断用户操作。
*   **根本原因**: 通知策略过于激进，未能区分需要用户立即关注的错误和仅供参考的普通信息。
*   **解决方案**: 对通知系统进行了全面的优化和收敛：
    1.  **重构 `showToastr` 函数**: 修改了 `showToastr` 的核心逻辑。现在，只有当接收到的消息类型是 `error` 时，它才会调用 `toastr_API.error` 来显示一个可见的错误弹窗。对于所有其他类型的消息（`success`, `info`, `warning`），该函数将不再显示任何界面元素，而是改为调用 `logDebug`，将信息静默地输出到浏览器的开发者控制台中。
    2.  **移除确认弹窗**: 在 `summarizeAndUploadChunk` 函数中，完全移除了当找不到目标世界书时弹出的 `SillyTavern_API.getContext().popup` 确认框。修改后的逻辑是，如果找不到世界书，插件将不再询问用户，而是默认继续执行总结操作，但跳过上传步骤，并同时在控制台打印一条警告日志。
*   **状态**: (已解决) - 已更新 `index.js`，现在只有在发生需要用户干预的错误时才会出现弹窗，所有其他通知都已转为后台日志，极大地提升了用户体验的流畅性。
